from sequence_annotation.preprocess.utils import get_data_names
import os
from argparse import ArgumentParser
ROOT = os.path.dirname(__file__)
sys.path.append(ROOT)


def main(saved_root, split_root, data_root, region_table_path,
         save_command_table_path, converter_args_path=None):

    MAIN_PATH = '{}/test_model.py'.format(ROOT)
    COMMAND = "python3 " + MAIN_PATH + \
        " -s {} -d {} -r {} --answer_gff_path {} --region_table_path {}"
    if not os.path.exists(MAIN_PATH):
        raise Exception("{} is not exists".format(MAIN_PATH))
    if not os.path.exists(region_table_path):
        raise Exception("The {} is not exist".format(region_table_path))

    data_names = get_data_names(split_root)

    for project_name, paths in data_names.items():
        project_path = os.path.join(saved_root, project_name)
        if not os.path.exists(project_path):
            raise Exception("The {} is not exist".format(project_path))

        for type_, name in paths.items():
            h5_path = os.path.join(data_root, name + ".h5")
            gff3_path = os.path.join(
                split_root, "gff", name + "_canonical.gff")
            for path in [h5_path, gff3_path]:
                if not os.path.exists(path):
                    raise Exception("The {} is not exist".format(path))
            result_root = os.path.join(project_path, "performance", type_)
            command = COMMAND.format(
                project_path,
                h5_path,
                result_root,
                gff3_path,
                region_table_path)
            if converter_args_path is not None:
                command += " --converter_args_path " + converter_args_path
            fp.write(command + "\n")


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument("-r", "--saved_root", required=True,
                        help='The path root generated by batch_train_command_generator')
    parser.add_argument("-s", "--split_root", required=True,
                        help='The data folder about split data')
    parser.add_argument("-d", "--data_root", required=True,
                        help='The data folder generated by batch_select_data.py')
    parser.add_argument("--save_command_table_path", required=True,
                        help='The path to save batch commands in tsv format')
    parser.add_argument("--region_table_path", required=True)
    parser.add_argument("--converter_args_path", type=str,
                        help="The path about keyword arguments of "
                        "build_ann_vec_gff_converter")

    args = parser.parse_args()
    kwargs = vars(args)
    main(**kwargs)
