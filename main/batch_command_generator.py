import os
import pandas as pd
from argparse import ArgumentParser

def _get_name(path,with_postfix=False):
    rel_path = path.split('/')[-1]
    if with_postfix:
        return rel_path
    else:
        return rel_path.split('.')[0]

def main(data_root,saved_root,
         save_command_table_path,save_result_name,
         is_test_command=False,mode=None,
         model_config_path=None,executor_config_path=None):

    PROJECT_PATH=os.path.dirname(os.path.abspath(__file__+"/.."))
    mode = mode or 'w'
    
    if is_test_command:
        COMMAND = "python3 {} -d {} -s {} -t {}"
        MAIN_PATH = '{}/main/test_model.py'.format(PROJECT_PATH)
        paths = [MAIN_PATH]
    else:
        if model_config_path is None or executor_config_path is None:
            raise Exception("The model_config_path and executor_config_path should not "+
                             "be None if test_command are True")
        COMMAND = "python3 {} -m {} -e {} -t {} -v {} -s {} --batch_size 8 --patient 20 --epoch 100 --period 1"
        MAIN_PATH = '{}/main/train_model.py'.format(PROJECT_PATH)
        paths = [MAIN_PATH,model_config_path,executor_config_path]

    for path in paths:
        if not os.path.exists(path):
            raise Exception("{} is not exists".format(path))
    
    saved_roots = []
    train_paths = []
    val_paths = []
    data_usage_path = os.path.join(data_root,'data_usage_path.csv')
    data_usage = pd.read_csv(data_usage_path,comment='#').to_dict('record')
    for item in data_usage:
        name = "{}_{}".format(_get_name(item['training_path']),_get_name(item['validation_path']))
        saved_root = os.path.join(saved_root,name)
        training_path = _get_name(item['training_path'],with_postfix=True)
        validation_path = _get_name(item['validation_path'],with_postfix=True)
        training_path = os.path.join(data_root,training_path)
        validation_path = os.path.join(data_root,validation_path)
        saved_roots.append(saved_root)
        train_paths.append(training_path)
        val_paths.append(validation_path)
        
    for paths in zip(train_paths,val_paths):
        if not all([os.path.exists(p) for p in paths]):
            raise Exception("Some paths, {}, are not exists".format(paths))
        
    with open(save_command_table_path,mode) as fp:
        if mode == 'w':
            fp.write("command\n")
            
        for paths in zip(train_paths,val_paths,saved_roots):
            train_path,val_path,saved_root = paths
            if is_test_command:
                saved_path = os.path.join(saved_root,save_result_name)
                test_on_train_path = os.path.join(saved_path,'test_on_train')
                test_on_val_path = os.path.join(saved_path,'test_on_val')
                test_on_train_command = COMMAND.format(MAIN_PATH,train_path,saved_path,test_on_train_path)
                test_on_val_command = COMMAND.format(MAIN_PATH,val_path,saved_path,test_on_val_path)
                test_on_train_command += " -g {} \n"
                test_on_val_command += " -g {} \n"
                fp.write(test_on_train_command)
                fp.write(test_on_val_command)
            else:
                saved_path = os.path.join(saved_root,save_result_name)
                command = COMMAND.format(MAIN_PATH,model_config_path,executor_config_path,
                                         train_path,val_path,saved_path)
                command += " -g {} \n"
                fp.write(command)

if __name__ == '__main__':    
    parser = ArgumentParser()
    parser.add_argument("-d","--data_root",help='The data folder generated by batch_select_data.py',required=True)
    parser.add_argument("-n","--save_result_name",required=True)
    parser.add_argument("-s","--saved_root",required=True)
    parser.add_argument("-c","--save_command_table_path",required=True)
    parser.add_argument("-e","--executor_config_path",help="Path of Executor config")
    parser.add_argument("-m","--model_config_path",help="Path of Model config")
    parser.add_argument("--is_test_command",action='store_true',help="Default is training command")
    parser.add_argument("--mode",help="Default mode is write mode (w)")

    args = parser.parse_args()
    kwargs = vars(args)
    main(**kwargs)
