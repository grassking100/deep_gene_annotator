import argparse
import sys
import os
import csv
from threading import Thread
import numpy
import keras
from keras.models import load_model
from sequence_annotation.pipeline.setting_implementer import CustomObjectsImplementer
from sequence_annotation.data_handler.training_data_handler import handle_alignment_files
from sequence_annotation.data_handler.fasta_handler import fasta2seqs
from sequence_annotation.model.seq_ann_model import SeqAnnModel
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__+'/..'))))
ANNOTATION_TYPES = ['utr_5', 'utr_3', 'intron', 'cds', 'intergenic_region']
#load input parameter
parser = argparse.ArgumentParser(description="Program will test the mode by"+
                                 "the data which is input")
parser.add_argument('-f', '--fasta', help='File\'s path to test', required=True)
parser.add_argument('-a', '--annotation', help='Annotation\'s path', required=True)
parser.add_argument('-m', '--model', help='Model\'s path to load', required=True)
parser.add_argument('-o', '--output', help='Output\'s path to save', required=True)
parser.add_argument('-n', '--notes', help='Notes to add in output file', required=False)
args = parser.parse_args()
#load data
input_file = args.fasta
print("Load data from file:"+input_file)
(x, y, ann_count) = handle_alignment_files([input_file], args.annotation, ANNOTATION_TYPES)
length = len(x)
results = [None]*length
threads = []
x_testing = keras.preprocessing.sequence.pad_sequences(x, maxlen=None, padding='post')
y_testing = keras.preprocessing.sequence.pad_sequences(y, maxlen=None, padding='post', value=-1)
weights = []
for key in ANNOTATION_TYPES:
    weights.append(1/ann_count[key])
#load model
file_root_name = args.model
(names, seqs) = fasta2seqs(input_file)
print("Load model from:"+file_root_name)
def threading_evaluate(model, x, y, index, results):
    results[index] = model.evaluate(numpy.array(x), numpy.array(y), batch_size=1, verbose=0)
#load model
settings = {'weights':weights, 'use_weights':True, 'output_dim':5,
            'terminal_signal':-1,
            'ANNOTATION_TYPES':ANNOTATION_TYPES, 'model':SeqAnnModel, 'model_name':'SeqAnnModel'}
implementer = CustomObjectsImplementer(settings)
custom_objects = implementer.implement()
model = load_model(file_root_name+".h5", custom_objects=custom_objects)
for i in range(length):
    print("Run threads:"+str(i+1)+"/"+str(length))
    threading_evaluate(model, [x_testing[i]], [y_testing[i]], i, results)
output_file = args.output
print("Save file to "+output_file)
notes = args.notes
with open(output_file, "w") as output_handler:
    writer = csv.writer(output_handler)
    if notes is not None:
        writer.writerow("#"+notes)
    writer.writerow(["id"]+m.metrics_names)
    index = 0
    for result in results:
        seq_id = names[index]
        writer.writerow([seq_id]+result)
        index += 1
